#!/usr/bin/perl
# Copyright (c) 2010 Svante J. Kvarnstrom <sjk@ankeborg.nu>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

###############################################################################
# Usage - irclogs2pf [-vk] [-t <table>]
#
# The script parses IRC logs from standard input. Run the script, paste IRC 
# logs and press CTRL+d when done.
#
# The -v switch turns on "verbose" mode. 

# Thanks goes to xkr47 for advice!

use strict;
use warnings;
use Socket;
use Net::hostent;
use Getopt::Std;

use constant VERSION => "0.3.1";
use constant PFTABLE => "drones";

sub main {
	my $ips;
	my $answer;

	# Process command line arguments
	my $optref = process_args();
	
	print "irclogs2pf v".VERSION."\n";
	print "Verbose mode enabled\n" if $optref->{"v"};


	my %hosts = scanip();				# Scan stdin for user@hosts

	exists_hosts(%hosts);				# Exit if %hosts is empty

	if (!$optref->{"b"}) {				# -b means batch; don't ask any questions.
		%hosts = edit_ip_list(%hosts);	# Give the user opportunity to remove ips from list.
	}

	exists_hosts(%hosts);				# Exit if %hosts is empty

	listips(%hosts);					# List IP addresses about to be blocked.

	if (!$optref->{"b"}) {				# -b means batch; don't ask any questions.
		$answer = askq("\nI'm about to block the above ip addresses. Should I proceed? ");
		return if ($answer !~ /y/i);
	}

	# Add IPs to table.
	foreach my $ip (sort(keys %hosts)) {
		$ips .= $ip." ";
	}
	pfctladd($ips, $optref);

	# If user supplied -k just go ahead and kill the states. Otherwise ask user if
	# killing states is desirable. Don't ask if user wants batch mode (-b)
	if ($optref->{"k"}) {
		foreach my $ip (sort(keys %hosts)) {
			pfctlkill($ip, $optref);
		}
	} elsif (!$optref->{"b"}) {
		$answer = askq("\nDo you also want me to kill the states of these connections? " );
		print "\n";
		if ($answer =~ /y/i) {
			foreach my $ip (sort(keys %hosts)) {
				pfctlkill($ip, $optref);
			}
		}
	}
}

sub exists_hosts {
	my (%hosts) = @_;

	if (!keys %hosts) {
		print "\nNo IP addresses to block, exiting...\n";
		exit(1);
	}

}

sub listips {
	my (%hosts) = @_; 
	print "\033[2J\033[H";	
	print "\nHosts to block:\n";

	foreach my $ip (sort(keys %hosts)) {
		print "$ip\n";
	}
}

sub pfctladd {
	my ($ips, $optref) = @_;
	my $cmd = "pfctl -t ".$optref->{"t"}." -T add $ips";
	print "$cmd\n" if $optref->{"v"};
	system($cmd);
}

sub pfctlkill {
	my ($ip, $optref) = @_;
	my $cmd = "pfctl -k $ip";
	print "$cmd\n" if $optref->{"v"};
	system($cmd);
}

sub process_args {
    my %opt;
    getopts('bkvt:', \%opt);

	if (!defined($opt{"t"})) {
		$opt{"t"} = PFTABLE;
	}

    return \%opt;
}

sub scanip {
	my %hosts;
	my $host;

	while(<STDIN>) {
		if ($_ =~ /\b~?[a-zA-z0-9._-]{1,10}@([a-zA-Z0-9_.-]+)\b/) {
			$host = $1;
			if ($host =~ /[a-zA-Z]/) { # This is not an ip address
				my $h = gethostbyname($host);
				$h ? $host = inet_ntoa($h->addr) : next; # If $h's null the host couldn't resolve.
			} 
			
			if (defined($hosts{$host})) {
				next; 
			}
			
			$hosts{$host} = 1;
		}
	}
	return %hosts;
}

sub edit_ip_list {
	my %hosts = (@_);
	
	my $idx = 0;
	my @answers;
	my $answer = 0;

	for (;;) {
		print "\033[2J\033[H";
		print "\n------------------\n";

		foreach my $ip (sort keys %hosts) {
			print ++$idx, " ", $ip, "\n";
		}

		$idx = 0;

		print "--------//--------\n\n";

	    $answer = askq("Ip(s) to ignore (or done): ");
		
		last if ($answer =~ /done/i);

		my @deleteips;
		foreach my $ans (split(/\s*/, $answer)) {
			if ($ans >= 1) {
				push @deleteips, (sort(keys %hosts))[$ans-1]; 
			} else {
				print "Not a valid number\n";
			}
		}	

		foreach my $delip (@deleteips) {
			delete $hosts{$delip};
		}

	}

	return %hosts;
}

# Might want to use IO::Prompt instead. But shrug, that's
# one more module dependancy.
sub askq {
	my $question = join('/\s*/', @_);
	open my $USER, '<', '/dev/tty' or die "Could not open /dev/tty: $!";
	print "$question";
	my $answer = <$USER>;
	chomp $answer;
	close $USER;
	return $answer;
}

main();
